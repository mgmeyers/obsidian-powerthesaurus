/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

/**
 * Transform the case in `value` (`string`) to match that of `base` (`string`).
 *
 * @param {string} value
 * @param {string} base
 * @returns {string}
 */
function matchCasing(value, base) {
  var index = -1;
  /** @type {string} */
  var char;
  /** @type {string} */
  var rest;
  /** @type {boolean} */
  var cap;

  if (base.toUpperCase() === base) {
    return value.toUpperCase()
  }

  if (base.toLowerCase() === base) {
    return value.toLowerCase()
  }

  while (++index < base.length) {
    char = base.charAt(index);

    if (char.toUpperCase() !== char.toLowerCase()) {
      rest = base.slice(index + 1);
      cap = char === char.toUpperCase() && rest === rest.toLowerCase();
      break
    }
  }

  if (cap) {
    index = -1;

    while (++index < value.length) {
      char = value.charAt(index).toUpperCase();

      if (char !== char.toLowerCase()) {
        return (
          value.slice(0, index) + char + value.slice(index + 1).toLowerCase()
        )
      }
    }
  }

  return value
}

function repositionWidget(widget, coords) {
    const height = widget.clientHeight;
    const width = widget.clientWidth;
    if (coords.bottom + height > window.innerHeight) {
        widget.style.setProperty("top", `${coords.top - height}px`);
    }
    if (coords.left + width > window.innerWidth) {
        widget.style.setProperty("left", `${window.innerWidth - width - 15}px`);
    }
}
function constructThesaurusPopover({ list, editor, selection, }) {
    let isDestroyed = false;
    const widget = createDiv({ cls: "pt-select" }, (div) => {
        list.forEach((synonym, i) => {
            div.createDiv({ cls: "pt-select-option" }, (option) => {
                var _a;
                option.dataset.index = i.toString();
                option.createDiv({ cls: "pt-select-label" }, (label) => {
                    var _a;
                    label.createDiv({ cls: "pt-term", text: synonym.term });
                    if ((_a = synonym.partsOfSpeech) === null || _a === void 0 ? void 0 : _a.length) {
                        label.createDiv({
                            cls: "pt-meta-pos",
                            text: synonym.partsOfSpeech.join(", "),
                        });
                    }
                });
                if ((_a = synonym.tags) === null || _a === void 0 ? void 0 : _a.length) {
                    option.createDiv({
                        cls: "pt-meta-tags",
                        text: synonym.tags.join(", "),
                    });
                }
            });
        });
    });
    const clickOutsideHandler = (e) => {
        const isTargetInWidget = e.target instanceof Node && widget.contains(e.target);
        if (!isTargetInWidget) {
            selfDestruct();
        }
    };
    const escHandler = (e) => {
        if (e.key === "Escape") {
            selfDestruct();
        }
    };
    const selfDestruct = () => {
        if (isDestroyed)
            return;
        isDestroyed = true;
        widget.remove();
        document.body.removeEventListener("pointerdown", clickOutsideHandler);
        document.removeEventListener("keydown", escHandler);
    };
    let coords;
    if (editor.cursorCoords) {
        coords = editor.cursorCoords(true, "window");
    }
    else if (editor.coordsAtPos) {
        const offset = editor.posToOffset(editor.getCursor("from"));
        coords = editor.coordsAtPos(offset);
    }
    else {
        return;
    }
    widget.on("click", ".pt-select-option", (e, el) => {
        editor.replaceSelection(matchCasing(list[parseInt(el.dataset.index)].term, selection));
        selfDestruct();
    });
    widget.style.left = `${coords.left}px`;
    widget.style.top = `${coords.bottom}px`;
    document.body.appendChild(widget);
    repositionWidget(widget, coords);
    document.body.addEventListener("pointerdown", clickOutsideHandler);
    document.addEventListener("keydown", escHandler);
    return selfDestruct;
}

const TEMP_LANG = 'en';
function getURL(sentence, lang) {
    return `https://systran-systran-platform-for-language-processing-v1.p.rapidapi.com/nlp/morphology/extract/pos?input=${encodeURIComponent(sentence)}&lang=${lang}`;
}
function getPOS(line, termIndex) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        const sentences = line.split(/[.!?]/g);
        let seen = 0;
        for (let sentence of sentences) {
            if (seen <= termIndex && termIndex <= seen + sentence.length) {
                const result = yield fetch(getURL(sentence, TEMP_LANG), {
                    "method": "GET",
                    "headers": {
                        "x-rapidapi-key": "5e1aff4a8dmsh29e6efbd0a66e0ep1c9b55jsn31b784e15a17",
                        "x-rapidapi-host": "systran-systran-platform-for-language-processing-v1.p.rapidapi.com"
                    }
                });
                const json = yield result.json();
                const wordIndex = termIndex - seen;
                const match = (_a = json.partsOfSpeech) === null || _a === void 0 ? void 0 : _a.find(pos => pos.start === wordIndex);
                if (match) {
                    const posStr = match.pos.split('/')[1];
                    if (posStr.startsWith('noun'))
                        return 2;
                    if (posStr.startsWith('verb'))
                        return 6;
                    if (posStr.startsWith('adj'))
                        return 1;
                    if (posStr.startsWith('adv'))
                        return 4;
                }
                break;
            }
            seen += sentence.length + 1;
        }
        return null;
    });
}

const apiUrl = "https://api.powerthesaurus.org/";
const POS_MAP = {
    1: "adj",
    2: "n",
    4: "adv",
    6: "v",
    7: "int",
    9: "conj",
    10: "prep",
};
class PowerThesaurusProvider {
    static appendAttribution(containerEl, selection) {
        containerEl.createDiv({ cls: "pt-link-option" }, (div) => {
            div.createEl("a", {
                cls: "external-link",
                text: "See more results",
                href: `https://www.powerthesaurus.org/${selection.toLowerCase()}/synonyms`,
            }, (a) => {
                a.target = "_blank";
            });
        });
        containerEl.createDiv({ cls: "pt-link-option" }, (div) => {
            div.createEl("a", {
                cls: "external-link pt-powered-by",
                text: "Powered by power thesaurus",
                href: `https://www.powerthesaurus.org/`,
            }, (a) => {
                a.target = "_blank";
            });
        });
    }
    getSynonyms(term, line, termIndex) {
        var _a, _b, _c, _d;
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const pos = yield getPOS(line, termIndex);
                const termIdResult = yield getTermId(term);
                const terms = (_b = (_a = termIdResult === null || termIdResult === void 0 ? void 0 : termIdResult.data) === null || _a === void 0 ? void 0 : _a.search) === null || _b === void 0 ? void 0 : _b.terms;
                if (pos && terms && terms.length) {
                    const termId = terms[0].id;
                    const searchResult = yield getRelatedWords(termId, pos);
                    const edges = (_d = (_c = searchResult === null || searchResult === void 0 ? void 0 : searchResult.data) === null || _c === void 0 ? void 0 : _c.thesauruses) === null || _d === void 0 ? void 0 : _d.edges;
                    if (edges && edges.length) {
                        const list = edges.map((edge) => {
                            var _a, _b, _c, _d, _e, _f;
                            const tags = (_b = (_a = edge === null || edge === void 0 ? void 0 : edge.node) === null || _a === void 0 ? void 0 : _a.relations) === null || _b === void 0 ? void 0 : _b.tags;
                            const pos = (_d = (_c = edge === null || edge === void 0 ? void 0 : edge.node) === null || _c === void 0 ? void 0 : _c.relations) === null || _d === void 0 ? void 0 : _d.parts_of_speech.map((p) => POS_MAP[p]);
                            const term = (_f = (_e = edge === null || edge === void 0 ? void 0 : edge.node) === null || _e === void 0 ? void 0 : _e.targetTerm) === null || _f === void 0 ? void 0 : _f.name;
                            return {
                                term,
                                pos,
                                tags,
                            };
                        });
                        return list;
                    }
                }
            }
            catch (e) {
                console.error(e);
                return null;
            }
        });
    }
}
const SEARCH_QUERY = `query SEARCH_QUERY($query: String!) {
      search(query: $query) {
        terms {
          id
          name
          slug
          counters
          __typename
    }
    list
    correctedFrom
    __typename
  }
}`;
function getTermId(term) {
    return __awaiter(this, void 0, void 0, function* () {
        const response = yield fetch(apiUrl, {
            method: "POST",
            //   mode: 'no-cors',
            headers: {
                "Content-Type": "application/json",
                "User-Agent": "Obsidian-PowerThesaurus/0.0.1",
            },
            body: JSON.stringify({
                operationName: "SEARCH_QUERY",
                variables: { query: term },
                query: SEARCH_QUERY,
            }),
        });
        return response.json();
    });
}
const THESAURUSES_QUERY = `query THESAURUSES_QUERY($after: String, $first: Int, $before: String, $last: Int, $termID: ID!, $list: List!, $sort: ThesaurusSorting!, $tagID: Int, $posID: Int, $syllables: Int, $type: Type) {
      thesauruses(
        termId: $termID
        sort: $sort
        list: $list
        after: $after
        first: $first
        before: $before
        last: $last
        tagId: $tagID
        partOfSpeechId: $posID
        syllables: $syllables
        type: $type
      ) {
        pageInfo {
          hasNextPage
          hasPreviousPage
          startCursor
          endCursor
          __typename
    }
    edges {
          node {
            _type
            id
            isPinned
            targetTerm {
              id
              name
              slug
              __typename
        }
        relations
        rating
        vote {
              voteType
              id
              __typename
        }
        votes
        __typename
      }
      __typename
    }
    __typename
  }
}`;
function getRelatedWords(termId, pos = null) {
    return __awaiter(this, void 0, void 0, function* () {
        const response = yield fetch(apiUrl, {
            method: "POST",
            //   mode: 'no-cors',
            headers: {
                "Content-Type": "application/json",
                "User-Agent": "Obsidian-PowerThesaurus/0.0.1",
            },
            body: JSON.stringify({
                operationName: "THESAURUSES_QUERY",
                variables: {
                    list: "SYNONYM",
                    termID: termId,
                    sort: { field: "RATING", direction: "DESC" },
                    tagID: null,
                    limit: 20,
                    syllables: null,
                    query: null,
                    posID: null,
                    first: 20,
                    after: "",
                },
                query: THESAURUSES_QUERY,
            }),
        });
        return response.json();
    });
}

const spaceRegEx = /\s/;
class PowerThesaurusPlugin extends obsidian.Plugin {
    constructor() {
        super(...arguments);
        this.destroyPopover = null;
        this.isPopoverLoading = false;
        this.handlePointerUp = obsidian.debounce(() => {
            const activeLeaf = this.app.workspace.activeLeaf;
            if (activeLeaf && activeLeaf.view instanceof obsidian.MarkdownView) {
                const view = activeLeaf.view;
                if (view.getMode() === "source") {
                    const selection = view.editor.getSelection();
                    if (!selection || spaceRegEx.test(selection))
                        return;
                    const cursor = view.editor.getCursor("from");
                    const line = view.editor.getLine(cursor.line);
                    this.isPopoverLoading = true;
                    new PowerThesaurusProvider()
                        .getSynonyms(selection, line, cursor.ch)
                        .then((list) => {
                        if ((list === null || list === void 0 ? void 0 : list.length) && this.isPopoverLoading) {
                            this.isPopoverLoading = false;
                            this.destroyPopover = constructThesaurusPopover({
                                list,
                                selection,
                                editor: view.editor,
                            });
                        }
                    })
                        .catch((e) => {
                        console.error(e);
                    });
                }
            }
        }, 300, true);
    }
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            document.on("pointerup", ".CodeMirror-line", this.handlePointerUp);
            this.registerDomEvent(window, "keydown", () => {
                if (this.isPopoverLoading) {
                    this.isPopoverLoading = false;
                }
                if (this.destroyPopover) {
                    this.destroyPopover();
                }
            });
        });
    }
    onunload() {
        document.off("pointerup", ".CodeMirror-line", this.handlePointerUp);
        if (this.isPopoverLoading) {
            this.isPopoverLoading = false;
        }
        if (this.destroyPopover) {
            this.destroyPopover();
            this.destroyPopover = null;
        }
    }
}

module.exports = PowerThesaurusPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

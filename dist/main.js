/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

const apiUrl = "https://api.powerthesaurus.org/";
function getSynonyms(term) {
    var _a, _b, _c, _d;
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const termIdResult = yield getTermId(term);
            const terms = (_b = (_a = termIdResult === null || termIdResult === void 0 ? void 0 : termIdResult.data) === null || _a === void 0 ? void 0 : _a.search) === null || _b === void 0 ? void 0 : _b.terms;
            if (terms && terms.length) {
                const termId = terms[0].id;
                const searchResult = yield getRelatedWords(termId);
                const edges = (_d = (_c = searchResult === null || searchResult === void 0 ? void 0 : searchResult.data) === null || _c === void 0 ? void 0 : _c.thesauruses) === null || _d === void 0 ? void 0 : _d.edges;
                if (edges && edges.length) {
                    const list = edges.map((edge) => {
                        var _a, _b, _c, _d, _e, _f;
                        const tags = (_b = (_a = edge === null || edge === void 0 ? void 0 : edge.node) === null || _a === void 0 ? void 0 : _a.relations) === null || _b === void 0 ? void 0 : _b.tags;
                        const pos = (_d = (_c = edge === null || edge === void 0 ? void 0 : edge.node) === null || _c === void 0 ? void 0 : _c.relations) === null || _d === void 0 ? void 0 : _d.parts_of_speech;
                        const term = (_f = (_e = edge === null || edge === void 0 ? void 0 : edge.node) === null || _e === void 0 ? void 0 : _e.targetTerm) === null || _f === void 0 ? void 0 : _f.name;
                        return {
                            term,
                            pos,
                            tags,
                        };
                    });
                    return list;
                }
            }
        }
        catch (e) {
            console.error(e);
            return null;
        }
    });
}
const SEARCH_QUERY = `query SEARCH_QUERY($query: String!) {
      search(query: $query) {
        terms {
          id
          name
          slug
          counters
          __typename
    }
    list
    correctedFrom
    __typename
  }
}`;
function getTermId(term) {
    return __awaiter(this, void 0, void 0, function* () {
        const response = yield fetch(apiUrl, {
            method: "POST",
            //   mode: 'no-cors',
            headers: {
                "Content-Type": "application/json",
                "User-Agent": "Obsidian-PowerThesaurus/0.0.1",
            },
            body: JSON.stringify({
                operationName: "SEARCH_QUERY",
                variables: { query: term },
                query: SEARCH_QUERY,
            }),
        });
        return response.json();
    });
}
const THESAURUSES_QUERY = `query THESAURUSES_QUERY($after: String, $first: Int, $before: String, $last: Int, $termID: ID!, $list: List!, $sort: ThesaurusSorting!, $tagID: Int, $posID: Int, $syllables: Int, $type: Type) {
      thesauruses(
        termId: $termID
        sort: $sort
        list: $list
        after: $after
        first: $first
        before: $before
        last: $last
        tagId: $tagID
        partOfSpeechId: $posID
        syllables: $syllables
        type: $type
      ) {
        pageInfo {
          hasNextPage
          hasPreviousPage
          startCursor
          endCursor
          __typename
    }
    edges {
          node {
            _type
            id
            isPinned
            targetTerm {
              id
              name
              slug
              __typename
        }
        relations
        rating
        vote {
              voteType
              id
              __typename
        }
        votes
        __typename
      }
      __typename
    }
    __typename
  }
}`;
function getRelatedWords(termId) {
    return __awaiter(this, void 0, void 0, function* () {
        const response = yield fetch(apiUrl, {
            method: "POST",
            //   mode: 'no-cors',
            headers: {
                "Content-Type": "application/json",
                "User-Agent": "Obsidian-PowerThesaurus/0.0.1",
            },
            body: JSON.stringify({
                operationName: "THESAURUSES_QUERY",
                variables: {
                    list: "SYNONYM",
                    termID: termId,
                    sort: { field: "RATING", direction: "DESC" },
                    tagID: null,
                    limit: 20,
                    syllables: null,
                    query: null,
                    posID: null,
                    first: 20,
                    after: "",
                },
                query: THESAURUSES_QUERY,
            }),
        });
        return response.json();
    });
}

/**
 * Transform the case in `value` (`string`) to match that of `base` (`string`).
 *
 * @param {string} value
 * @param {string} base
 * @returns {string}
 */
function matchCasing(value, base) {
  var index = -1;
  /** @type {string} */
  var char;
  /** @type {string} */
  var rest;
  /** @type {boolean} */
  var cap;

  if (base.toUpperCase() === base) {
    return value.toUpperCase()
  }

  if (base.toLowerCase() === base) {
    return value.toLowerCase()
  }

  while (++index < base.length) {
    char = base.charAt(index);

    if (char.toUpperCase() !== char.toLowerCase()) {
      rest = base.slice(index + 1);
      cap = char === char.toUpperCase() && rest === rest.toLowerCase();
      break
    }
  }

  if (cap) {
    index = -1;

    while (++index < value.length) {
      char = value.charAt(index).toUpperCase();

      if (char !== char.toLowerCase()) {
        return (
          value.slice(0, index) + char + value.slice(index + 1).toLowerCase()
        )
      }
    }
  }

  return value
}

const POS_MAP = {
    1: "adj.",
    2: "n.",
    4: "adv.",
    6: "v.",
    7: "int.",
    9: "conj.",
    10: "prep.",
};
function getPosString(synonym) {
    const pos = synonym === null || synonym === void 0 ? void 0 : synonym.pos.reduce((mapped, p) => {
        if (POS_MAP[p]) {
            mapped.push(POS_MAP[p]);
        }
        return mapped;
    }, []);
    if (pos === null || pos === void 0 ? void 0 : pos.length) {
        return pos.join(", ");
    }
    return null;
}
function repositionWidget(widget, coords) {
    const height = widget.clientHeight;
    const width = widget.clientWidth;
    if (coords.bottom + height > window.innerHeight) {
        widget.style.setProperty("top", `${coords.top - height}px`);
    }
    if (coords.left + width > window.innerWidth) {
        widget.style.setProperty("left", `${window.innerWidth - width - 15}px`);
    }
}
function constructThesaurusPopover({ list, codeMirrorInstance, selection, }) {
    let isDestroyed = false;
    const widget = createDiv({ cls: "pt-select" }, (div) => {
        list.forEach((synonym, i) => {
            div.createDiv({ cls: "pt-select-option" }, (option) => {
                var _a;
                option.dataset.index = i.toString();
                option.createDiv({ cls: "pt-select-label" }, (label) => {
                    label.createDiv({ cls: "pt-term", text: synonym.term });
                    label.createDiv({
                        cls: "pt-meta-pos",
                        text: getPosString(synonym),
                    });
                });
                if ((_a = synonym.tags) === null || _a === void 0 ? void 0 : _a.length) {
                    option.createDiv({
                        cls: "pt-meta-tags",
                        text: synonym.tags.join(", "),
                    });
                }
            });
        });
        div.createDiv({ cls: "pt-link-option" }, (div) => {
            div.createEl("a", {
                cls: "external-link",
                text: "See more results",
                href: `https://www.powerthesaurus.org/${selection.toLowerCase()}/synonyms`,
            }, (a) => {
                a.target = "_blank";
            });
        });
        div.createDiv({ cls: "pt-link-option" }, (div) => {
            div.createEl("a", {
                cls: "external-link pt-powered-by",
                text: "Powered by power thesaurus",
                href: `https://www.powerthesaurus.org/`,
            }, (a) => {
                a.target = "_blank";
            });
        });
    });
    const clickOutsideHandler = (e) => {
        const isTargetInWidget = e.target instanceof Node && widget.contains(e.target);
        if (!isTargetInWidget) {
            selfDestruct();
        }
    };
    const escHandler = (e) => {
        if (e.key === "Escape") {
            selfDestruct();
        }
    };
    const selfDestruct = () => {
        if (isDestroyed)
            return;
        isDestroyed = true;
        widget.remove();
        document.body.removeEventListener("pointerdown", clickOutsideHandler);
        document.removeEventListener("keydown", escHandler);
    };
    const coords = codeMirrorInstance.cursorCoords(true, "window");
    widget.on("click", ".pt-select-option", (e, el) => {
        codeMirrorInstance.replaceSelection(matchCasing(list[parseInt(el.dataset.index)].term, selection));
        selfDestruct();
    });
    widget.style.left = `${coords.left}px`;
    widget.style.top = `${coords.bottom}px`;
    document.body.appendChild(widget);
    repositionWidget(widget, coords);
    document.body.addEventListener("pointerdown", clickOutsideHandler);
    document.addEventListener("keydown", escHandler);
    return selfDestruct;
}

const spaceRegEx = /\s/;
class PowerThesaurusPlugin extends obsidian.Plugin {
    constructor() {
        super(...arguments);
        this.destroyPopover = null;
    }
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            this.registerCodeMirror((cm) => {
                const cursorHandler = obsidian.debounce((instance) => {
                    const selection = instance.getSelection();
                    if (!selection || spaceRegEx.test(selection)) {
                        return;
                    }
                    getSynonyms(selection).then((list) => {
                        if (list) {
                            this.destroyPopover = constructThesaurusPopover({
                                list,
                                selection,
                                codeMirrorInstance: instance,
                            });
                        }
                    });
                }, 1000);
                cm.on("cursorActivity", instance => {
                    if (this.destroyPopover) {
                        this.destroyPopover();
                        this.destroyPopover = null;
                    }
                    if (!navigator.onLine) {
                        return;
                    }
                    cursorHandler(instance);
                });
            });
        });
    }
    onunload() {
        if (this.destroyPopover) {
            this.destroyPopover();
            this.destroyPopover = null;
        }
    }
}

module.exports = PowerThesaurusPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXMiOlsiLi4vbm9kZV9tb2R1bGVzL3RzbGliL3RzbGliLmVzNi5qcyIsIi4uL3NyYy9hcGkudHMiLCIuLi9ub2RlX21vZHVsZXMvbWF0Y2gtY2FzaW5nL2luZGV4LmpzIiwiLi4vc3JjL3BvcG92ZXIudHMiLCIuLi9zcmMvbWFpbi50cyJdLCJzb3VyY2VzQ29udGVudCI6bnVsbCwibmFtZXMiOlsiUGx1Z2luIiwiZGVib3VuY2UiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUF1REE7QUFDTyxTQUFTLFNBQVMsQ0FBQyxPQUFPLEVBQUUsVUFBVSxFQUFFLENBQUMsRUFBRSxTQUFTLEVBQUU7QUFDN0QsSUFBSSxTQUFTLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxPQUFPLEtBQUssWUFBWSxDQUFDLEdBQUcsS0FBSyxHQUFHLElBQUksQ0FBQyxDQUFDLFVBQVUsT0FBTyxFQUFFLEVBQUUsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUU7QUFDaEgsSUFBSSxPQUFPLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxPQUFPLENBQUMsRUFBRSxVQUFVLE9BQU8sRUFBRSxNQUFNLEVBQUU7QUFDL0QsUUFBUSxTQUFTLFNBQVMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLEVBQUUsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFO0FBQ25HLFFBQVEsU0FBUyxRQUFRLENBQUMsS0FBSyxFQUFFLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMs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QUFDbkMsSUFBSSxPQUFPLEtBQUssQ0FBQyxXQUFXLEVBQUU7QUFDOUIsR0FBRztBQUNIO0FBQ0EsRUFBRSxJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUUsS0FBSyxJQUFJLEVBQUU7QUFDbkMsSUFBSSxPQUFPLEtBQUssQ0FBQyxXQUFXLEVBQUU7QUFDOUIsR0FBRztBQUNIO0FBQ0EsRUFBRSxPQUFPLEVBQUUsS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUU7QUFDaEMsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUM7QUFDN0I7QUFDQSxJQUFJLElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRSxLQUFLLElBQUksQ0FBQyxXQUFXLEVBQUUsRUFBRTtBQUNuRCxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyxDQUFDLEVBQUM7QUFDbEMsTUFBTSxHQUFHLEdBQUcsSUFBSSxLQUFLLElBQUksQ0FBQyxXQUFXLEVBQUUsSUFBSSxJQUFJLEtBQUssSUFBSSxDQUFDLFdBQVcsR0FBRTtBQUN0RSxNQUFNLEtBQUs7QUFDWCxLQUFLO0FBQ0wsR0FBRztBQUNIO0FBQ0EsRUFBRSxJQUFJLEdBQUcsRUFBRTtBQUNYLElBQUksS0FBSyxHQUFHLENBQUMsRUFBQztBQUNkO0FBQ0EsSUFBSSxPQUFPLEVBQUUsS0FBSyxHQUFHLEtBQUssQ0FBQyxNQUFNLEVBQUU7QUFDbkMsTUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxXQUFXLEdBQUU7QUFDOUM7QUFDQSxNQUFNLElBQUksSUFBSSxLQUFLLElBQUksQ0FBQyxXQUFXLEVBQUUsRUFBRTtBQUN2QyxRQUFRO0FBQ1IsVUFBVSxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsR0FBRyxJQUFJLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFO0FBQzdFLFNBQVM7QUFDVCxPQUFPO0FB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
